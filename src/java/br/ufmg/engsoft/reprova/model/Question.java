package br.ufmg.engsoft.reprova.model;

import br.ufmg.engsoft.reprova.database.QuestionsDAO;
import java.util.*;
import org.bson.Document;


/**
 * The question type.
 */
public class Question {
    /**
     * The id of the question.
     * When null, the id will be automatically generated by the database.
     */
    public final String id;
    /**
     * The theme of the question. Mustn't be null nor empty.
     */
    public final String theme;
    /**
     * The description of the question. Mustn't be null nor empty.
     */
    public final String description;
    /**
     * The statement of the question. May be null or empty.
     */
    public final String statement;
    /**
     * The record of the question per semester per class. Mustn't be null, may be empty.
     */
    //  public final Map<Semester, Map<String, Float>> record;
    public final List<Course> courses;
    /**
     * Whether the question is private.
     */
    public final boolean isPrivate;


    /**
     * Builder for Question.
     */
    public static class Builder {
        protected String id;
        protected String theme;
        protected String description;
        protected String statement;
        protected List<Course> courses;
        protected boolean isPrivate = true;

        public Builder id(String id) {
            this.id = id;
            return this;
        }

        public Builder theme(String theme) {
            this.theme = theme;
            return this;
        }

        public Builder description(String description) {
            this.description = description;
            return this;
        }

        public Builder statement(String statement) {
            this.statement = statement;
            return this;
        }

        public Builder courses(List<Course> courses) {
            this.courses = courses;
            return this;
        }

        public Builder isPrivate(boolean isPrivate) {
            this.isPrivate = isPrivate;
            return this;
        }


        /**
         * Build the question.
         *
         * @throws IllegalArgumentException if any parameter is invalid
         */
        public Question build() {
            if (theme == null) throw new IllegalArgumentException("theme mustn't be null");

            if (theme.isEmpty()) throw new IllegalArgumentException("theme mustn't be empty");

            if (description == null) throw new IllegalArgumentException("description mustn't be null");

            if (description.isEmpty()) throw new IllegalArgumentException("description mustn't be empty");


            if (this.courses == null) {
                this.courses = new ArrayList<>();
            } else {
                // All inner maps mustn't be null:
                for (Course course : this.courses) {
                    if (course == null) {
                        throw new IllegalArgumentException("Semester mustn't be null");
                    }
                }
            }

            return new Question(this.id, this.theme, this.description, this.statement, this.courses, this.isPrivate);
        }
    }

    /**
     * Protected constructor, should only be used by the builder.
     */
    protected Question(String id, String theme, String description, String statement, List<Course> courses, boolean isPrivate) {
        this.id = id;
        this.theme = theme;
        this.description = description;
        this.statement = statement;
        this.courses = courses;
        this.isPrivate = isPrivate;
    }

	public Document createDocument() {
		List<Course> courses = this.courses;
		Document doc = new Document().append("theme", this.theme).append("description", this.description)
				.append("statement", this.statement).append("courses", courses).append("pvt", this.isPrivate);
		QuestionsDAO.getLogger().info("Stored question " + doc.get("_id"));
		return doc;
	}
    
    /**
     * Equality comparison.
     * Although this object has an id, equality is checked on all fields.
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == this) return true;

        if (!(obj instanceof Question)) return false;

        Question question = (Question) obj;

        return this.id.equals(question.id) && this.theme.equals(question.theme) && this.description.equals(question.description) && this.statement.equals(question.statement) && this.courses.equals(question.courses) && this.isPrivate == question.isPrivate;
    }


    @Override
    public int hashCode() {
        return Objects.hash(this.id, this.theme, this.description, this.statement, this.courses, this.isPrivate);
    }


    /**
     * Convert a Question to String for visualization purposes.
     */
    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();

        builder.append("Question:\n");
        builder.append("  id: " + this.id + "\n");
        builder.append("  theme: " + this.theme + "\n");
        builder.append("  desc: " + this.description + "\n");
        builder.append("  semesters: " + this.courses + "\n");
        builder.append("  pvt: " + this.isPrivate + "\n");
        if (this.statement != null)
            builder.append("  head: " + this.statement.substring(0, Math.min(this.statement.length(), 50)) + "\n");

        return builder.toString();
    }
}
